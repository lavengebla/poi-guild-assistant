package ru.ed.module.bot.update;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.LinkPreviewOptions;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.MessageEntity;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.ed.module.bot.command.Command;
import ru.ed.module.bot.command.Exec;
import ru.ed.module.bot.event.TelegramEventPublisher;
import ru.ed.module.bot.service.BroadcastService;
import ru.ed.module.bot.service.ImageService;
import ru.ed.module.bot.service.MediaGroupCollector;
import ru.ed.module.bot.service.TelegramBotImpl;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;


@Log4j2
@Component
@HandlerType(type = "message")
@RequiredArgsConstructor
public class MessageSent implements UpdateHandler {

    private final TelegramEventPublisher telegramEventPublisher;
    private final List<Command> commandList;
    private final TelegramBotImpl bot;
    private final BroadcastService broadcastService;
    private final MediaGroupCollector mediaGroupCollector;
    private final ImageService imageService;


    @Override
    public void handle(Update update) {
        Message message = update.getMessage();
        log.debug("–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", message);
        if (message.getText() != null) {
            log.debug("—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç: {}", message.getText());
            textMessage(message);
        }
        if (message.getCaption() != null) {
            log.debug("—Å–æ–æ–±—â–µ–Ω–∏–µ —Å caption: {}", message.getText());
            caption(message);
        }

        if (message.getCaption() == null && message.getMediaGroupId() != null) {
            mediaGroupCollector.addUpdate(message);
        }
//        //–Ω–æ–≤—ã–π —á–∞—Ç –º–µ–º–±–µ—Ä
//        else if (!update.getMessage().getNewChatMembers().isEmpty()) {
//            log.trace("—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞");
//            newChatMembers(update.getMessage().getChat(), update.getMessage().getNewChatMembers());
//        }
//        //–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª
//        else if (update.getMessage().getLeftChatMember() != null) {
//            leftChatMember(update.getMessage().getChat(), update.getMessage().getLeftChatMember());
//        }
//        //–Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
//        else if (update.getMessage().getNewChatTitle() != null) {
//            log.trace("—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞");
//            changeChannelName(update.getMessage().getChat(), update.getMessage().getNewChatTitle());
//        }
//
//        //–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–≥–ª–æ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–≥–∞–ª–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–æ–º
//        updateChatMember(update.getMessage().getChat(), update.getMessage().getFrom());
    }


    private void caption(Message message) {
        String caption = message.getCaption();
        if (message.getCaptionEntities() != null && hasRepostHashTag(message.getCaptionEntities())) {

            if (!checkLinkIsPresent(message)) {
                return;
            }

            broadcastService.list()
                .stream()
                .parallel()
                .forEach(b -> {
                    if (hasHashTag(message.getCaptionEntities(), b.getEventName())) {
                        if (message.getMediaGroupId() == null) {
                            SendPhoto sendPhoto = new SendPhoto();
                            try {
                                File photo = bot.getFile(message.getPhoto().getLast().getFileId());
                                InputFile inputFile = new InputFile();
                                inputFile.setMedia(photo);
                                sendPhoto.setPhoto(inputFile);
                            } catch (TelegramApiException e) {
                                throw new RuntimeException(e);
                            }
                            sendPhoto.setCaption(caption
                                .replace("#repost", "")
                                .replace("#%s".formatted(b.getEventName()), ""));
                            sendPhoto.setCaptionEntities(
                                message.getCaptionEntities()
                                    .stream()
                                    .filter(e -> !(e.getType().equals("hashtag") && e.getText().equals("#repost")))
                                    .filter(e -> !(e.getType().equals("hashtag") && e.getText().equals("#%s".formatted(b.getEventName()))))
                                    .toList()
                            );
                            sendPhoto.setChatId(b.getChatId());
                            sendPhoto.setMessageThreadId(b.getThreadId());
                            telegramEventPublisher.publish(sendPhoto);
                        } else {
                            mediaGroupCollector.addUpdate(message);
                        }
                    }
                });
        }
    }

    private boolean checkLinkIsPresent(Message message) {
        List<MessageEntity> messageEntities = new ArrayList<>();
        if (message.hasEntities()) {
            messageEntities = message.getEntities();
        } else if (message.getCaptionEntities() != null && !message.getCaptionEntities().isEmpty()) {
            messageEntities = message.getCaptionEntities();
        }
        boolean isPresent = messageEntities
            .stream()
            .anyMatch(e -> e.getType().equals("text_link") && e.getUrl().equals("https://t.me/poi160"));

        if (!isPresent) {
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(message.getFrom().getId());
            sendMessage.setText("–¢—ã –∑–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç AURI –≤ –ø–æ—Å—Ç–µ");
            sendMessage.setReplyToMessageId(message.getMessageId());
            telegramEventPublisher.publish(sendMessage);

            SendMessage pattern = new SendMessage();
            pattern.setChatId(message.getFrom().getId());
            pattern.setText("""
                ‚Äî‚Äî‚Äî<b>
                –ê–≤—Ç–æ—Ä: </b><a href="tg://user?id=%s">%s %s</a>%s
                <b><a href="https://t.me/poi160">AURI | –û–±—É—á–∞–µ–º—Å—è, —á—Ç–æ–±—ã –æ–±—É—á–∞—Ç—å</a></b>
                """.formatted(
                message.getFrom().getId(),
                message.getFrom().getFirstName(),
                message.getFrom().getLastName(),
                message.getFrom().getUserName() != null ?
                    " (@%s)".formatted(message.getFrom().getUserName()) : "")
            );
            pattern.setReplyToMessageId(message.getMessageId());
            pattern.enableHtml(true);
            LinkPreviewOptions previewOptions = new LinkPreviewOptions();
            previewOptions.setIsDisabled(true);
            pattern.setLinkPreviewOptions(previewOptions);
            telegramEventPublisher.publish(pattern);
        }

        return isPresent;
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private void textMessage(Message message) {
        String text = message.getText();
        if (text.startsWith("/")) {
            processCommand(message, text);
        } else {

            if (!message.getChatId().toString().startsWith("-")) {
                ifWhatCanIdo(message);
                ifRegisterParticipant(message);
            }
            
            if (message.hasEntities() && hasRepostHashTag(message.getEntities())) {
                hasRepost(message);
            }
        }
    }

    private void ifRegisterParticipant(Message message) {
        if (message.getText().equals("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞")) {
            SendPhoto regIntro = new SendPhoto();
            regIntro.setChatId(message.getChatId());
            InputFile inputFile = new InputFile();
            inputFile.setMedia(imageService.getImage("reg_first"), "reg_first");
            regIntro.setPhoto(inputFile);
            regIntro.setParseMode("html");
            regIntro.setCaption(
                """
                    –Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã ‚Äî <b>%s</b>, –±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å —Å –Ω–∞–º–∏! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å <a href="https://t.me/poi160/3773/175263">–ü—Ä–∞–≤–∏–ª–∞–º–∏ –∫–ª–∞–Ω–∞</a>, —ç—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–π –≤ –±—É–¥—É—â–µ–º.\s
                    
                    –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç - –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É, —Ç—É—Ç —è –ø–æ–∫–∞–∑–∞–ª –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –≤–∑—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∞–º–æ–π –∏–≥—Ä–µ –∏ –º—ã –ø—Ä–æ–π–¥–µ–º 5 —ç—Ç–∞–ø–∞:
                    
                    üü¢1. –¢–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –ò–º—è;
                    üü¢2. –°–∫—Ä–∏–Ω —ç–∫—Ä–∞–Ω–∞ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª;
                    üü¢3. –¢–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –ù–∏–∫;
                    üü¢4. –ö–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞;
                    üü¢5. ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞;
                    ü§©6. –ê–≤–∞—Ç–∞—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è).
                    
                    –ü—Ä–∏—Å—Ç—É–ø–∏–º?
                    """.formatted(message.getFrom().getFirstName()));

            InlineKeyboardMarkup accept = new InlineKeyboardMarkup();
            InlineKeyboardButton acceptBtn = new InlineKeyboardButton();
            acceptBtn.setText("–ü—Ä–∞–≤–∏–ª–∞ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç");
            acceptBtn.setCallbackData("/rules_accept");
            accept.setKeyboard(List.of(List.of(acceptBtn)));
            regIntro.setReplyMarkup(accept);

            telegramEventPublisher.publish(regIntro);
        }
    }

    private void ifWhatCanIdo(Message message) {
        if (message.getText().equals("–ß—Ç–æ —è —É–º–µ—é?")) {
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(message.getChatId());
            sendMessage.setMessageThreadId(message.getMessageThreadId());
            sendMessage.enableHtml(true);
            sendMessage.setText("""
            <b>–ß—Ç–æ —è —É–º–µ—é?</b>
            <b>‚Äî üìù–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b> - —è –º–æ–≥—É —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫ —á–ª–µ–Ω–∞ –∫–ª–∞–Ω–∞ <b>AcademAURI</b>, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–µ –æ—Ç–±–æ—Ä –ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –≤ –∫–ª–∞–Ω <b>AURI</b> –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –∏–ª–∏ –û—Ñ–∏—Ü–µ—Ä–æ–≤.
            <b>‚Äî ü™™–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> - —Ç—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ, —Å–≤–æ–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ, –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è –æ —Å–º–µ–Ω–µ –ù–∏–∫–Ω–µ–π–º–∞ –∏–ª–∏ –ö–ª–∞—Å—Å–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Å–µ–∑–æ–Ω–∞–º —É—á–∞—Å—Ç–∏—è –≤ –í–µ—Å—Ç–Ω–∏–∫–∞—Ö, –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è—Ö –∏ –ö–æ–º–∞–Ω–¥–Ω—ã—Ö –∞—Ä–µ–Ω–∞—Ö, –∞ —Ç–∞–∫–∂–µ - –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ê–≤–∞—Ç–∞—Ä –≤ –ª—é–±—É—é —Å–µ–∫—É–Ω–¥—É.
            <blockquote>–ü–æ–º–∏–º–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π - —è –±—É–¥—É —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –∫–ª–∞–Ω–∞, —Å–æ–±–∏—Ä–∞—Ç—å —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–æ–≤—ã–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!</blockquote>
            """);
            telegramEventPublisher.publish(sendMessage);

            DeleteMessage deleteMessage = new DeleteMessage();
            deleteMessage.setChatId(message.getChatId());
            deleteMessage.setMessageId(message.getMessageId());
            telegramEventPublisher.publish(deleteMessage);
        }
    }

    private void hasRepost(Message message) {
        broadcastService.list()
            .stream()
            .parallel()
            .forEach(b -> {
                if (hasHashTag(message.getEntities(), b.getEventName())) {
                    SendMessage sendMessage = new SendMessage();
                    sendMessage.setEntities(message.getEntities());
                    sendMessage.setLinkPreviewOptions(message.getLinkPreviewOptions());
                    sendMessage.setText(message.getText()
                        .replace("#repost", "")
                        .replace("#%s".formatted(b.getEventName()), ""));
                    sendMessage.setChatId(b.getChatId());
                    sendMessage.setMessageThreadId(b.getThreadId());
                    telegramEventPublisher.publish(sendMessage);
                }
            });
    }

    //todo –≤ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥
    public static boolean hasHashTag(List<MessageEntity> entities,
                                     String hashtag) {
        return entities.stream()
            .filter(e -> e.getType().equals("hashtag"))
            .anyMatch(e -> e.getText().equalsIgnoreCase("#%s".formatted(hashtag)));
    }

    private static boolean hasRepostHashTag(List<MessageEntity> entities) {
        return entities.stream()
            .filter(e -> e.getType().equals("hashtag"))
            .anyMatch(e -> e.getText().equalsIgnoreCase("#repost"));
    }

    private void processCommand(Message message,
                                String text) {
        log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã");
        Optional<Command> candidate = findCommand(text);
        if (candidate.isPresent()) {
            executeCommand(message, candidate.get());
        } else {
            //          commandNotFound(message);
        }
        log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }

    private void executeCommand(Message message,
                                Command command) {
        if (command.requiresAdminRights()) {
            Long chatId = message.getChatId();
            Long userId = message.getFrom().getId();
            boolean isUserAdmin;
            try {
                isUserAdmin = bot.getChatAdministrator(chatId)
                    .stream()
                    .anyMatch(c -> c.getUser().getId().equals(userId));
            } catch (TelegramApiException e) {
                throw new RuntimeException(e);
            }
            if (isUserAdmin) {
                command.execute(message);
            } else {
                commandShouldBeSentByAdmin(message);
            }
        } else {
            command.execute(message);
        }
    }

    private Optional<Command> findCommand(String text) {
        return commandList.stream()
            .filter(c -> {
                if (c.getClass().isAnnotationPresent(Exec.class)) {
                    Exec exec = c.getClass().getAnnotation(Exec.class);
                    return (
                        text.startsWith("/%s".formatted(exec.executable()))
                            || Arrays.stream(exec.alias()).anyMatch(a -> text.startsWith("/%s".formatted(a)))
                    );
                } else {
                    return false;
                }
            })
            .findFirst();
    }

    private void commandShouldBeSentByAdmin(org.telegram.telegrambots.meta.api.objects.Message message) {
        sendMessage(message, "–∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞");
    }

    private void commandNotFound(org.telegram.telegrambots.meta.api.objects.Message message) {
        sendMessage(message, "–∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    private void sendMessage(org.telegram.telegrambots.meta.api.objects.Message message,
                             String error) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setText(error);
        sendMessage.setReplyToMessageId(message.getMessageId());
        sendMessage.setChatId(message.getChatId());
        sendMessage.setMessageThreadId(message.getMessageThreadId());
        telegramEventPublisher.publish(sendMessage);
    }


//    private void newChatMembers(Chat chat,
//                                List<User> newChatMembers) {
//        newChatMembers.forEach(u -> updateChatMember(chat, u));
//    }

//    private void updateChatMember(Chat chat,
//                                  User user) {
//        log.trace("–æ–±–Ω–æ–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{}] –≤ —á–∞—Ç–µ [{}]", user, chat);
//        Optional<UserEntity> candidate = userService.findByTelegramId(user.getId());
//        log.trace("–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω - {}", candidate.isPresent());
//        UserEntity participant;
//        participant = candidate.orElseGet(() -> userService.add(user.getUserName(), user.getId()));
//        log.trace("–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: [{}]", participant);
//        if (!user.getUserName().equals(participant.getUsername())) {
//            log.trace("–æ–±–Ω–æ–≤–ª—è—é username");
//            participant.setUsername(user.getUserName());
//            userService.update(participant);
//        }
//
//        Optional<ChannelEntity> channel = channelService.find(chat.getId());
//        if (channel.isPresent()) {
//            log.trace("–æ–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞");
//            List<UserEntity> participants =
//                channelService.findParticipants(channel.get());
//            log.trace("—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {}", participants);
//            List<Long> usersId = participants.stream().map(UserEntity::getId).toList();
//            if (!usersId.contains(participant.getId())) {
//                log.trace("—É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è—é");
//                channelService.addParticipant(participant, channel.get());
//            }
//        } else {
//            log.error("failed to add participant, chat is not registered - [{}]", chat);
//        }
//    }
//
//    private void leftChatMember(Chat chat,
//                                User user) {
//        Optional<UserEntity> candidate = userService.findByTelegramId(user.getId());
//        if (candidate.isPresent()) {
//            Optional<ChannelEntity> channel = channelService.find(chat.getId());
//            channel
//                .ifPresent(
//                    entity -> channelService.deleteParticipant(candidate.get(), entity)
//                );
//        }
//    }
//
//    private void changeChannelName(Chat chat,
//                                   String title) {
//        //–∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
//        Optional<ChannelEntity> candidate = channelService.find(chat.getId());
//        if (candidate.isPresent()) {
//            ChannelEntity channel = candidate.get();
//            channel.setName(title);
//            channelService.update(channel);
//        }
//    }
}
